// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace prototest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Foo;

// ===================================================================

class Foo : public ::google::protobuf::Message {
 public:
  Foo();
  virtual ~Foo();

  Foo(const Foo& from);

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Foo& default_instance();

  void Swap(Foo* other);

  // implements Message ----------------------------------------------

  Foo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string bar = 2;
  inline bool has_bar() const;
  inline void clear_bar();
  static const int kBarFieldNumber = 2;
  inline const ::std::string& bar() const;
  inline void set_bar(const ::std::string& value);
  inline void set_bar(const char* value);
  inline void set_bar(const char* value, size_t size);
  inline ::std::string* mutable_bar();
  inline ::std::string* release_bar();
  inline void set_allocated_bar(::std::string* bar);

  // optional string baz = 3;
  inline bool has_baz() const;
  inline void clear_baz();
  static const int kBazFieldNumber = 3;
  inline const ::std::string& baz() const;
  inline void set_baz(const ::std::string& value);
  inline void set_baz(const char* value);
  inline void set_baz(const char* value, size_t size);
  inline ::std::string* mutable_baz();
  inline ::std::string* release_baz();
  inline void set_allocated_baz(::std::string* baz);

  // @@protoc_insertion_point(class_scope:prototest.Foo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bar();
  inline void clear_has_bar();
  inline void set_has_baz();
  inline void clear_has_baz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bar_;
  ::std::string* baz_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static Foo* default_instance_;
};
// ===================================================================


// ===================================================================

// Foo

// required int32 id = 1;
inline bool Foo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Foo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Foo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Foo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Foo::id() const {
  return id_;
}
inline void Foo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string bar = 2;
inline bool Foo::has_bar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Foo::set_has_bar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Foo::clear_has_bar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Foo::clear_bar() {
  if (bar_ != &::google::protobuf::internal::kEmptyString) {
    bar_->clear();
  }
  clear_has_bar();
}
inline const ::std::string& Foo::bar() const {
  return *bar_;
}
inline void Foo::set_bar(const ::std::string& value) {
  set_has_bar();
  if (bar_ == &::google::protobuf::internal::kEmptyString) {
    bar_ = new ::std::string;
  }
  bar_->assign(value);
}
inline void Foo::set_bar(const char* value) {
  set_has_bar();
  if (bar_ == &::google::protobuf::internal::kEmptyString) {
    bar_ = new ::std::string;
  }
  bar_->assign(value);
}
inline void Foo::set_bar(const char* value, size_t size) {
  set_has_bar();
  if (bar_ == &::google::protobuf::internal::kEmptyString) {
    bar_ = new ::std::string;
  }
  bar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Foo::mutable_bar() {
  set_has_bar();
  if (bar_ == &::google::protobuf::internal::kEmptyString) {
    bar_ = new ::std::string;
  }
  return bar_;
}
inline ::std::string* Foo::release_bar() {
  clear_has_bar();
  if (bar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bar_;
    bar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Foo::set_allocated_bar(::std::string* bar) {
  if (bar_ != &::google::protobuf::internal::kEmptyString) {
    delete bar_;
  }
  if (bar) {
    set_has_bar();
    bar_ = bar;
  } else {
    clear_has_bar();
    bar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string baz = 3;
inline bool Foo::has_baz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Foo::set_has_baz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Foo::clear_has_baz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Foo::clear_baz() {
  if (baz_ != &::google::protobuf::internal::kEmptyString) {
    baz_->clear();
  }
  clear_has_baz();
}
inline const ::std::string& Foo::baz() const {
  return *baz_;
}
inline void Foo::set_baz(const ::std::string& value) {
  set_has_baz();
  if (baz_ == &::google::protobuf::internal::kEmptyString) {
    baz_ = new ::std::string;
  }
  baz_->assign(value);
}
inline void Foo::set_baz(const char* value) {
  set_has_baz();
  if (baz_ == &::google::protobuf::internal::kEmptyString) {
    baz_ = new ::std::string;
  }
  baz_->assign(value);
}
inline void Foo::set_baz(const char* value, size_t size) {
  set_has_baz();
  if (baz_ == &::google::protobuf::internal::kEmptyString) {
    baz_ = new ::std::string;
  }
  baz_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Foo::mutable_baz() {
  set_has_baz();
  if (baz_ == &::google::protobuf::internal::kEmptyString) {
    baz_ = new ::std::string;
  }
  return baz_;
}
inline ::std::string* Foo::release_baz() {
  clear_has_baz();
  if (baz_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = baz_;
    baz_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Foo::set_allocated_baz(::std::string* baz) {
  if (baz_ != &::google::protobuf::internal::kEmptyString) {
    delete baz_;
  }
  if (baz) {
    set_has_baz();
    baz_ = baz;
  } else {
    clear_has_baz();
    baz_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace prototest

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
